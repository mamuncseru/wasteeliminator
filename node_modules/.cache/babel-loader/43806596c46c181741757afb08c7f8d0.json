{"ast":null,"code":"import _slicedToArray from\"C:/Users/HP/Documents/React Native/wasteeliminator/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";// import locdata from './mockLocation.json';\nimport{jsx as _jsx}from\"react/jsx-runtime\";var fetch=require(\"isomorphic-fetch\");var _require=require(\"recompose\"),compose=_require.compose,withProps=_require.withProps,withHandlers=_require.withHandlers;var _require2=require(\"react-google-maps\"),withScriptjs=_require2.withScriptjs,withGoogleMap=_require2.withGoogleMap,GoogleMap=_require2.GoogleMap,Marker=_require2.Marker;var _require3=require(\"react-google-maps/lib/components/addons/MarkerClusterer\"),MarkerClusterer=_require3.MarkerClusterer;var MapWithAMarkerClusterer=compose(withProps({googleMapURL:\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBZibHlhg2TX5MQuzQzr7h3cPTtZhfo7MY&v=3.exp&libraries=geometry,drawing,places\",loadingElement:/*#__PURE__*/_jsx(\"div\",{style:{height:\"100%\"}}),mapElement:/*#__PURE__*/_jsx(\"div\",{style:{height:\"90%\"}})}),withHandlers({onMarkerClustererClick:function onMarkerClustererClick(){return function(markerClusterer){var clickedMarkers=markerClusterer.getMarkers();console.log(\"Current clicked markers length: \".concat(clickedMarkers.length));console.log(clickedMarkers);};}}),withScriptjs,withGoogleMap)(function(props){return/*#__PURE__*/_jsx(GoogleMap,{defaultZoom:3,defaultCenter:{lat:26.0252409,lng:89.0209659},children:/*#__PURE__*/_jsx(MarkerClusterer,{onClick:props.onMarkerClustererClick,averageCenter:true,enableRetinaIcons:true,gridSize:60,children:props.markers.map(function(marker){return/*#__PURE__*/_jsx(Marker,{position:{lat:marker.lat,lng:marker.long}},Math.random());})})});});// Mock Location Data for better clustering....\n// const arr = locdata.map((item) => ({lat: parseFloat(item.latitude), long: parseFloat(item.longitude)}));\nvar Markerclusterer=function Markerclusterer(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),markers=_useState2[0],setMarkers=_useState2[1];useEffect(function(){var url=\"https://waste-eliminator-api.us-south.cf.appdomain.cloud/datas\";fetch(url).then(function(res){return res.json();}).then(function(data){setMarkers(data.datas.map(function(item){return{lat:parseFloat(item.location.lat),long:parseFloat(item.location.long)};}));});},[props.updatedData]);return/*#__PURE__*/_jsx(MapWithAMarkerClusterer,{containerElement:/*#__PURE__*/_jsx(\"div\",{style:{height:\"\".concat(props.height),width:\"\".concat(props.width)}}),markers:markers});};export default Markerclusterer;","map":{"version":3,"sources":["C:/Users/HP/Documents/React Native/wasteeliminator/src/components/Map/MarkerClusterer.js"],"names":["React","useEffect","useState","fetch","require","compose","withProps","withHandlers","withScriptjs","withGoogleMap","GoogleMap","Marker","MarkerClusterer","MapWithAMarkerClusterer","googleMapURL","loadingElement","height","mapElement","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","console","log","length","props","lat","lng","markers","map","marker","long","Math","random","Markerclusterer","setMarkers","url","then","res","json","data","datas","item","parseFloat","location","updatedData","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import locdata from './mockLocation.json';\nconst fetch = require(\"isomorphic-fetch\");\nconst { compose, withProps, withHandlers } = require(\"recompose\");\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} = require(\"react-google-maps\");\nconst {\n  MarkerClusterer,\n} = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\n\nconst MapWithAMarkerClusterer = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBZibHlhg2TX5MQuzQzr7h3cPTtZhfo7MY&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    mapElement: <div style={{ height: `90%` }} />,\n  }),\n  withHandlers({\n    onMarkerClustererClick: () => (markerClusterer) => {\n      const clickedMarkers = markerClusterer.getMarkers();\n      console.log(`Current clicked markers length: ${clickedMarkers.length}`);\n      console.log(clickedMarkers);\n    },\n  }),\n  withScriptjs,\n  withGoogleMap\n)((props) => (\n  <GoogleMap defaultZoom={3} defaultCenter={{ lat: 26.0252409, lng: 89.0209659 }}>\n    <MarkerClusterer\n      onClick={props.onMarkerClustererClick}\n      averageCenter\n      enableRetinaIcons\n      gridSize={60}\n    >\n      {props.markers.map((marker) => (\n        <Marker\n          key={Math.random()}\n          position={{ lat: marker.lat, lng: marker.long }}\n        />\n      ))}\n    </MarkerClusterer>\n  </GoogleMap>\n));\n\n// Mock Location Data for better clustering....\n// const arr = locdata.map((item) => ({lat: parseFloat(item.latitude), long: parseFloat(item.longitude)}));\n\nconst Markerclusterer = (props) => {\n \n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    const url =\n      \"https://waste-eliminator-api.us-south.cf.appdomain.cloud/datas\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => \n      {\n        setMarkers(data.datas.map((item) => ({lat: parseFloat(item.location.lat), long: parseFloat(item.location.long)}))\n        );\n      })\n  }, [props.updatedData]);\n\n\n\n  return (\n    <MapWithAMarkerClusterer\n      containerElement={\n        <div style={{ height: `${props.height}`, width: `${props.width}` }} />\n      }\n      markers={markers}\n    />\n  );\n};\n\nexport default Markerclusterer;\n"]},"metadata":{},"sourceType":"module"}