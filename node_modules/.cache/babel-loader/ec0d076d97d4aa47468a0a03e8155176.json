{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\React Native\\\\wasteeliminator\\\\src\\\\components\\\\Map\\\\MarkerClusterer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import locdata from './mockLocation.json';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetch = require(\"isomorphic-fetch\");\n\nconst {\n  compose,\n  withProps,\n  withHandlers\n} = require(\"recompose\");\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker\n} = require(\"react-google-maps\");\n\nconst {\n  MarkerClusterer\n} = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\n\nconst MapWithAMarkerClusterer = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBZibHlhg2TX5MQuzQzr7h3cPTtZhfo7MY&v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 21\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `90%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 17\n  }, this)\n}), withHandlers({\n  onMarkerClustererClick: () => markerClusterer => {\n    const clickedMarkers = markerClusterer.getMarkers();\n    console.log(`Current clicked markers length: ${clickedMarkers.length}`);\n    console.log(clickedMarkers);\n  }\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  defaultZoom: 3,\n  defaultCenter: {\n    lat: 26.0252409,\n    lng: 89.0209659\n  },\n  children: /*#__PURE__*/_jsxDEV(MarkerClusterer, {\n    onClick: props.onMarkerClustererClick,\n    averageCenter: true,\n    enableRetinaIcons: true,\n    gridSize: 60,\n    children: props.markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: marker.lat,\n        lng: marker.long\n      }\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 3\n}, this)); // Mock Location Data for better clustering....\n// const arr = locdata.map((item) => ({lat: parseFloat(item.latitude), long: parseFloat(item.longitude)}));\n\nconst Markerclusterer = props => {\n  _s();\n\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    const url = \"https://waste-eliminator-api.us-south.cf.appdomain.cloud/datas\";\n    fetch(url).then(res => res.json()).then(data => {\n      setMarkers(data.datas.map(item => ({\n        lat: parseFloat(item.location.lat),\n        long: parseFloat(item.location.long)\n      })));\n    });\n  }, [props.updatedData]);\n  return /*#__PURE__*/_jsxDEV(MapWithAMarkerClusterer, {\n    containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: `${props.height}`,\n        width: `${props.width}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this),\n    markers: markers\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Markerclusterer, \"aVe0o7Xd1RI2qqyy9XuFimi/3oU=\");\n\n_c = Markerclusterer;\nexport default Markerclusterer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Markerclusterer\");","map":{"version":3,"sources":["C:/Users/HP/Documents/React Native/wasteeliminator/src/components/Map/MarkerClusterer.js"],"names":["React","useEffect","useState","fetch","require","compose","withProps","withHandlers","withScriptjs","withGoogleMap","GoogleMap","Marker","MarkerClusterer","MapWithAMarkerClusterer","googleMapURL","loadingElement","height","mapElement","onMarkerClustererClick","markerClusterer","clickedMarkers","getMarkers","console","log","length","props","lat","lng","markers","map","marker","long","Math","random","Markerclusterer","setMarkers","url","then","res","json","data","datas","item","parseFloat","location","updatedData","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import locdata from './mockLocation.json';\nconst fetch = require(\"isomorphic-fetch\");\nconst { compose, withProps, withHandlers } = require(\"recompose\");\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n} = require(\"react-google-maps\");\nconst {\n  MarkerClusterer,\n} = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\n\nconst MapWithAMarkerClusterer = compose(\n  withProps({\n    googleMapURL:\n      \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBZibHlhg2TX5MQuzQzr7h3cPTtZhfo7MY&v=3.exp&libraries=geometry,drawing,places\",\n    loadingElement: <div style={{ height: `100%` }} />,\n    mapElement: <div style={{ height: `90%` }} />,\n  }),\n  withHandlers({\n    onMarkerClustererClick: () => (markerClusterer) => {\n      const clickedMarkers = markerClusterer.getMarkers();\n      console.log(`Current clicked markers length: ${clickedMarkers.length}`);\n      console.log(clickedMarkers);\n    },\n  }),\n  withScriptjs,\n  withGoogleMap\n)((props) => (\n  <GoogleMap defaultZoom={3} defaultCenter={{ lat: 26.0252409, lng: 89.0209659 }}>\n    <MarkerClusterer\n      onClick={props.onMarkerClustererClick}\n      averageCenter\n      enableRetinaIcons\n      gridSize={60}\n    >\n      {props.markers.map((marker) => (\n        <Marker\n          key={Math.random()}\n          position={{ lat: marker.lat, lng: marker.long }}\n        />\n      ))}\n    </MarkerClusterer>\n  </GoogleMap>\n));\n\n// Mock Location Data for better clustering....\n// const arr = locdata.map((item) => ({lat: parseFloat(item.latitude), long: parseFloat(item.longitude)}));\n\nconst Markerclusterer = (props) => {\n \n  const [markers, setMarkers] = useState([]);\n\n  useEffect(() => {\n    const url =\n      \"https://waste-eliminator-api.us-south.cf.appdomain.cloud/datas\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => \n      {\n        setMarkers(data.datas.map((item) => ({lat: parseFloat(item.location.lat), long: parseFloat(item.location.long)}))\n        );\n      })\n  }, [props.updatedData]);\n\n\n\n  return (\n    <MapWithAMarkerClusterer\n      containerElement={\n        <div style={{ height: `${props.height}`, width: `${props.width}` }} />\n      }\n      markers={markers}\n    />\n  );\n};\n\nexport default Markerclusterer;\n"]},"metadata":{},"sourceType":"module"}